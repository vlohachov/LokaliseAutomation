name: Create new release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Update type'
        type: choice
        options:
          - patch
          - minor
      release-type:
        description: 'Release type'
        type: choice
        options:
          - stable
          - pre-release

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.new-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          fetch-depth: 0

      - name: Get latest release TAG
        id: get-tag
        run: |
          latest_release_tag=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' 'refs/tags/v*' | head -n 1)
          echo "Latest release tag: ${latest_release_tag}"
          echo tag=${latest_release_tag} >> $GITHUB_OUTPUT;

      - name: Check for breaking changes
        id: breaking-changes
        run: |
          breaking_commits=$(git log ${{ steps.get-tag.outputs.tag }}..HEAD --format=%B --grep="BREAKING CHANGE: ")
          if [[ ${breaking_commits} != "" ]]; then
            result=true
          fi
          echo result=${result:-false} >> $GITHUB_OUTPUT;

      - name: Generate new version
        id: new-version
        run: |
          latest_release_tag=${{ steps.get-tag.outputs.tag }}
          current_version=${latest_release_tag:1}
          
          echo "Current version: ${current_version}"
          
          major_version=$(echo "${current_version}" | cut -d "." -f 1)
          minor_version=$(echo "${current_version}" | cut -d "." -f 2)
          patch_version=$(echo "${current_version}" | cut -d "." -f 3)
          
          if [[ ${{ steps.breaking-changes.outputs.result == 'true' }} ]]; then
            new_version="$((major_version+1)).0.0"
          elif [[ ${{ github.event.inputs.update-type == 'minor' }} ]]; then
            new_version="${major_version}.$((minor_version+1)).0"
          elif [[ ${{ github.event.inputs.update-type == 'patch' }} ]]; then
            new_version="${major_version}.${minor_version}.$((patch_version+1))"
          fi
          
          if [[ ${{ github.event.inputs.release-type == 'pre-release' }} ]]; then
            new_version+="-alpha"
          fi
          
          echo "New version: ${new_version}"
          
          echo version=${new_version} >> $GITHUB_OUTPUT;

  release:
    needs: [ update-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Configure Git
        run: |
          git config --global user.email "${{ github.actor }}@users.noreply.github.com"
          git config --global user.name "${{ github.actor }}"

      - name: Add new release tag
        id: new-tag
        run: |
          tag="v${{ needs.update-version.outputs.version }}"
          echo "TAG: ${tag}"
          #git tag -a $tag -m "Release $tag"
          #git push origin $tag
          echo tag=${tag} >> $GITHUB_OUTPUT;

      - name: Create stable release
        if: ${{ github.event.inputs.release-type == 'stable' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.new-tag.outputs.tag }} --generate-notes

      - name: Create pre release
        if: ${{ github.event.inputs.release-type == 'pre-release' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ steps.new-tag.outputs.tag }} --prerelease --generate-notes

  publish:
    needs: [ update-version, release ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Publish
        env:
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.update-version.outputs.version }}
        run: |
          ./gradlew publish
