name: Create new release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Update type'
        type: choice
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
          - alpha
          - rc

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.current-version.outputs.version }}
      new-version: ${{ steps.new-version.outputs.new-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Release type
        id: release-type
        run: |
          if [[ ${{ github.event.inputs.update-type }} == 'alpha' ]]; then
            value='alpha'
          elif [[ ${{ github.event.inputs.update-type }} == 'rc' ]]; then
            value='rc'
          else
            value='stable'
          fi
          echo value=${value} >> $GITHUB_OUTPUT;

      - name: Current version
        id: current-version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          releases=$(gh release list --exclude-drafts | awk '{print $1}')
          releases+=$'\n'"v5.2.0-alpha1"$'\n'"v5.2.0-alpha2"
          echo "${releases}"
          sorted=$(echo "${releases}" | sort -Vr)
          current_version=$(echo "${sorted}" | head -1)
          echo "Current version: ${current_version}"
          echo version=${current_version:1} >> $GITHUB_OUTPUT;

      - name: Check for breaking changes
        id: breaking-changes
        # Maybe should be enabled despite the release type
        if: false
#        if: ${{ steps.release-type.outputs.value == 'stable' }}
        run: |
          breaking_commits=$(git log v${{ steps.current-version.outputs.version }}..HEAD --format=%B --grep="BREAKING CHANGE: ")
          if [[ ${breaking_commits} != "" ]]; then
            result=true
          fi
          echo result=${result:-false} >> $GITHUB_OUTPUT;

      - name: New version
        id: new-version
        uses: vlohachov/LokaliseAutomation/.github/actions/new-version@main
        with:
          current-version: ${{ steps.current-version.outputs.version }}
          major-increment: ${{ github.event.inputs.update-type == 'major' }}
          minor-increment: ${{ github.event.inputs.update-type == 'minor' }}
          patch-increment: ${{ github.event.inputs.update-type == 'patch' }}
          alpha-increment: ${{ github.event.inputs.update-type == 'alpha' }}
          rc-increment: ${{ github.event.inputs.update-type == 'rc' }}

  publish:
    needs: [ update-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 1.17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Publish
        env:
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.update-version.outputs.new-version }}
        run: |
          ./gradlew publish

  release:
    needs: [ update-version, publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Release type
        id: release-type
        run: |
          if [[ ${{ github.event.inputs.update-type }} == 'alpha' ]]; then
            value='alpha'
          elif [[ ${{ github.event.inputs.update-type }} == 'rc' ]]; then
            value='rc'
          else
            value='stable'
          fi
          echo value=${value} >> $GITHUB_OUTPUT; 

      - name: Create stable release
        if: ${{ steps.release-type.outputs.value == 'stable' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ needs.update-version.outputs.new-version }} \
          --target ${{ github.ref_name }} \
          --generate-notes --notes-start-tag v${{ needs.update-version.outputs.current-version }}

      - name: Create pre release
        if: ${{ steps.release-type.outputs.value != 'stable' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ needs.update-version.outputs.new-version }} --prerelease \
          --target ${{ github.ref_name }} \
          --generate-notes --notes-start-tag v${{ needs.update-version.outputs.current-version }}
