name: Create new release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      hot-fix:
        description: 'Check if hot-fix release'
        type: boolean
        required: true
        default: false
      update-type:
        description: 'Update type'
        type: choice
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
      release-type:
        description: 'Release type'
        type: choice
        required: true
        default: 'stable'
        options:
          - stable
          - pre-release

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.current-version.outputs.version }}
      new-version: ${{ steps.new-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Current version
        id: current-version
        run: |
          tag=$(git log --simplify-by-decoration --pretty="format:%d" | grep tag | head -1)
          current_version=$(echo "${tag}" | grep -oP '(?<=tag: ).*(?=\))')
          echo "Current version: ${current_version}"
          echo version=${current_version} >> $GITHUB_OUTPUT;

      - name: Check for breaking changes
        id: breaking-changes
        if: ${{ !github.events.inputs.hot-fix }}
        run: |
          breaking_commits=$(git log ${{ steps.current-version.outputs.version }}..HEAD --format=%B --grep="BREAKING CHANGE: ")
          if [[ ${breaking_commits} != "" ]]; then
            result=true
          fi
          echo result=${result:-false} >> $GITHUB_OUTPUT;

      - name: New version
        id: new-version
        run: |
          current_version=${{ steps.current-version.outputs.version }}
          current_version=${current_version#*v}
          
          echo "Current version: ${current_version}"
          
          major_version=$(echo "${current_version}" | cut -d "." -f 1)
          minor_version=$(echo "${current_version}" | cut -d "." -f 2)
          patch_version=$(echo "${current_version}" | cut -d "." -f 3 | sed -E 's/-alpha[0-9]+$//')
          
          if [[ ${{ github.event.inputs.hot-fix }} ]]; then
            fix_version=$(echo "${current_version}" | cut -d "." -f 4)
            if [ -z "${fix_version}" ]; then 
              fix_version=0 
            fi
            new_version="${major_version}.${minor_version}.${patch_version}.$((fix_version+1))"
          elif [[ "${{ steps.breaking-changes.outputs.result }}" == "true" || "${{ github.event.inputs.update-type }}" == "major" ]]; then
            new_version="$((major_version+1)).0.0"
          elif [[ "${{ github.event.inputs.update-type }}" == "minor" ]]; then
            new_version="${major_version}.$((minor_version+1)).0"
          elif [[ "${{ github.event.inputs.update-type }}" == "patch" ]]; then
            new_version="${major_version}.${minor_version}.$((patch_version+1))"
          fi
          
          if [[ "${{ github.event.inputs.release-type }}" == "pre-release" ]]; then
            new_version+="-alpha"
          fi
          
          echo "New version: ${new_version}"
          
          echo version="v${new_version}" >> $GITHUB_OUTPUT;

  publish:
    if: false
    needs: [ update-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 1.17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Publish
        env:
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ needs.update-version.outputs.new-version }}
        run: |
          ./gradlew publish

  release:
#    needs: [ update-version, publish ]
    needs: [ update-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create stable release
        if: ${{ github.event.inputs.release-type == 'stable' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.update-version.outputs.new-version }} \
          --generate-notes --notes-start-tag ${{ needs.update-version.outputs.current-version }}

      - name: Create pre release
        if: ${{ github.event.inputs.release-type == 'pre-release' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.update-version.outputs.new-version }} --prerelease \
          --generate-notes --notes-start-tag ${{ needs.update-version.outputs.current-version }}
