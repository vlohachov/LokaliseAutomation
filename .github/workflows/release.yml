name: Create new release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
    inputs:
      update-type:
        description: 'Update type'
        type: choice
        required: true
        default: 'patch'
        options:
          - patch
          - minor
          - major
      release-type:
        description: 'Release type'
        type: choice
        required: true
        default: 'stable'
        options:
          - stable
          - alpha
          - hot-fix

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      current-version: ${{ steps.current-version.outputs.version }}
      new-version: ${{ steps.new-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Current version
        id: current-version
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          releases=$(gh release list --exclude-drafts | awk '{print $1}')
          releases+=$'\n'"v5.2.0-alpha1"$'\n'"v5.2.0-alpha2"
          echo "${releases}"
          current_version=$(echo "${releases}" | sort -Vr | head -1)
          echo "Current version: ${current_version}"
          echo version=${current_version} >> $GITHUB_OUTPUT;

      - name: Check for breaking changes
        id: breaking-changes
        # Maybe should be enabled despite the release type
        if: ${{ github.event.inputs.release-type != 'stable' }}
        run: |
          breaking_commits=$(git log ${{ steps.current-version.outputs.version }}..HEAD --format=%B --grep="BREAKING CHANGE: ")
          if [[ ${breaking_commits} != "" ]]; then
            result=true
          fi
          echo result=${result:-false} >> $GITHUB_OUTPUT;

      - name: New version
        id: new-version
        run: |
          current_version=${{ steps.current-version.outputs.version }}
          current_version=${current_version:1}
          
          echo "Current version: ${current_version}"
          
          major_version=$(echo "${current_version}" | cut -d "." -f 1)
          minor_version=$(echo "${current_version}" | cut -d "." -f 2)
          patch_version=$(echo "${current_version}" | cut -d "." -f 3)
          
          # If not stable release and patch has no suffix
          if [[ "${{ github.event.inputs.release-type }}" != "stable" && ${patch_version} != *"-"* ]]; then
            suffix=0
          # Else if alpha release
          elif [[ "${{ github.event.inputs.release-type }}" == "alpha" ]]; then
            suffix=${patch_version#*alpha}
          # Else if hot-fix release
          elif [[ "${{ github.event.inputs.release-type }}" == "hot-fix" ]]; then
            suffix=${patch_version#*rc}
          fi
          
          # Remove suffix if already present
          patch_version=${patch_version%-*}
          
          if [[ "${{ github.event.inputs.release-type }}" == "alpha" ]]; then
            new_version="${major_version}.${minor_version}.${patch_version}-alpha$((suffix+1))"
          elif [[ "${{ github.event.inputs.release-type }}" == "hot-fix" ]]; then
            new_version="${major_version}.${minor_version}.${patch_version}-rc$((suffix+1))"
          elif [[ "${{ steps.breaking-changes.outputs.result }}" == "true" || "${{ github.event.inputs.update-type }}" == "major" ]]; then
            new_version="$((major_version+1)).0.0"
          elif [[ "${{ github.event.inputs.update-type }}" == "minor" ]]; then
            new_version="${major_version}.$((minor_version+1)).0"
          elif [[ "${{ github.event.inputs.update-type }}" == "patch" ]]; then
            new_version="${major_version}.${minor_version}.$((patch_version+1))"
          fi
          
          echo "New version: ${new_version}"
          
          echo version="v${new_version}" >> $GITHUB_OUTPUT;

  publish:
    if: false
    needs: [ update-version ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup JDK 1.17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'zulu'

      - name: Fix version
        id: fix-version
        run: |
          version=${{ needs.update-version.outputs.new-version }}
          version=${version:1}
          echo version=${version} >> $GITHUB_OUTPUT;

      - name: Publish
        env:
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.fix-version.outputs.version }}
        run: |
          ./gradlew publish

  release:
    needs: [ update-version, publish ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create stable release
        if: ${{ github.event.inputs.release-type == 'stable' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.update-version.outputs.new-version }} \
          --target ${{ github.ref_name }} \
          --generate-notes --notes-start-tag ${{ needs.update-version.outputs.current-version }}

      - name: Create pre release
        if: ${{ github.event.inputs.release-type == 'pre-release' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create ${{ needs.update-version.outputs.new-version }} --prerelease \
          --target ${{ github.ref_name }} \
          --generate-notes --notes-start-tag ${{ needs.update-version.outputs.current-version }}
