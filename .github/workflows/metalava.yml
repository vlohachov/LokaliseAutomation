name: Metalava

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  metalava-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Check compatibility (Kotlin)
        id: compat-kotlin
        continue-on-error: true
        run: |
          if ./gradlew metalavaCheckCompatibility 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibility FAILED'; then
            echo "::set-output name=compat-error::$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd ',')"
            exit 1
          fi

      - name: Check compatibility (Android)
        id: compat-android
        continue-on-error: true
        run: |
          if ./gradlew metalavaCheckCompatibilityDebug 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibilityDebug FAILED'; then
            echo "::set-output name=compat-error::$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd ',')"
            exit 1
          fi

      - name: Check for breaking change
        if: ${{ always() }}
        run: |
          # Extract errors from compat-error output into an array
          errors="${{ steps.compat-kotlin.outputs.compat-error }},${{ steps.compat-android.outputs.compat-error }}"
          IFS=',' read -ra errors_arr <<< "$errors"
          
          # Group errors by module
          declare -A module_errors
          for error in "${errors_arr[@]}"; do
            module=$(echo "${error}" | awk -F'[ .()]' '{print $(NF-2)}')
            if [[ -z "${module_errors[$module]}" ]]; then
              module_errors[$module]="${error}"
            else
              module_errors[$module]+=$'\n'"${error}"
            fi
          done
          
          # Print errors grouped by module
          for module in "${!module_errors[@]}"; do
            echo "${module}:"
            echo "${module_errors[$module]}"
          done
