name: Metalava compatibility check

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  base-signatures:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0
        with:
          ref: ${{ github.base_ref }}

      - name: Generate signature files
        run: |
          ./gradlew metalavaGenerateSignature metalavaGenerateSignatureDebug

      - name: Save signature files
        uses: actions/upload-artifact@v3
        with:
          name: base-signatures
          path: ./**/api/

  check-compatibilities:
    needs: [ base-signatures ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current
        uses: actions/checkout@v3.1.0

      - name: Load signature files
        uses: actions/download-artifact@v3
        with:
          name: base-signatures

      - name: Check Kotlin libs compatibility
        id: check-compat-kotlin
        run: |
          if ./gradlew metalavaCheckCompatibility 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibility FAILED'; then
            errors=$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd '|')
            errors=$(sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" <<< "$errors")
            echo compat-errors=$errors >> $GITHUB_OUTPUT;
          fi

      - name: Check Android libs compatibility
        id: check-compat-android
        run: |
          if ./gradlew metalavaCheckCompatibilityDebug 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibilityDebug FAILED'; then
            errors=$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd '|')
            errors=$(sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]//g" <<< "$errors")
            echo compat-errors=$errors >> $GITHUB_OUTPUT;
          fi

      - name: Combine possible compatibility errors
        id: combine-compat-errors
        run: |
          combined_errors=""
          
          # Append Kotlin libs compat errors
          if [[ "${{ steps.check-compat-kotlin.outputs.compat-errors }}" != "" ]]; then
            combined_errors+="${{ steps.check-compat-kotlin.outputs.compat-errors }}"
          fi
          
          # Append Android libs compat errors
          if [[ "${{ steps.check-compat-android.outputs.compat-errors }}" != "" ]]; then
            if [[ ${combined_errors} != "" ]]; then
              combined_errors+="|"
            fi
            combined_errors+="${{ steps.check-compat-android.outputs.compat-errors }}"
          fi
          
          echo combined-compat-errors=$combined_errors >> $GITHUB_OUTPUT;

      - name: Generate PR body appendix message
        id: appendix-message
        if: ${{ steps.combine-compat-errors.outputs.combined-compat-errors != '' }}
        run: |
          # Create bash array of combined errors
          IFS='|' read -ra errors_arr <<< "${{ steps.combine-compat-errors.outputs.combined-compat-errors }}"
          
          # Details with errors grouped by module
          message=$(
            for error in "${!errors_arr[@]}"; do
              echo "- ${errors_arr[error]}"
            done
          )
          
          delimiter="$(openssl rand -hex 8)"
          echo "message<<${delimiter}" >> ${GITHUB_OUTPUT}
          echo "$message" >> ${GITHUB_OUTPUT}
          echo "${delimiter}" >> ${GITHUB_OUTPUT}

      - name: Update PR (title & body)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          appendix_message="${{ steps.appendix-message.outputs.message }}"
          
          # Get PR title
          gh pr view ${{ github.event.number }} --json title > pr_title.json
          pr_title=$(jq -r '.title' pr_title.json)
          
          # Get PR body
          gh pr view ${{ github.event.number }} --json body > pr_body.json
          pr_body=$(jq -r '.body' pr_body.json)
          
          # Update PR title
          pr_prefix="BREAKING CHANGE: "

          # Add prefix if not yet added and appendix is not empty
          if [[ "${pr_title}" != "${pr_prefix}"* ]] && [[ -n "${appendix_message}" ]]; then
            pr_title="${pr_prefix}${pr_title}"
          # Remove prefix if added and appendix is empty
          elif [[ "${pr_title}" == "${pr_prefix}"* ]] && [[ -z "${appendix_message}" ]]; then
            pr_title="${pr_title/#${pr_prefix}/}"
          fi
          gh pr edit ${{ github.event.number }} --title "${pr_title}"
          
          # Update PR body
          issues_section="### ❗ Compatibility Issues ❗"
          # Remove old appendix if present
          if grep -q "${issues_section}" <<< "${pr_body}"; then
            pr_body=$(sed "/${issues_section}/,\$d" <<< "${pr_body}")
          fi
          # Add appendix if not empty
          if [[ -n "${appendix_message}" ]]; then
            pr_body_appendix="${issues_section}"$'\n'"${appendix_message}"
            pr_body="${pr_body}"$'\n\n'"${pr_body_appendix}"
          fi
          gh pr edit ${{ github.event.number }} --body "${pr_body}"

  current-signatures:
    needs: [ check-compatibilities ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Generate signature files
        run: |
          ./gradlew metalavaGenerateSignature metalavaGenerateSignatureDebug

      - name: Save signature files
        uses: actions/upload-artifact@v3
        with:
          name: current-signatures
          path: ./**/api/
