name: Metalava

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  metalava-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.1.0

      - name: Check Kotlin libs compatibility
        id: check-compat-kotlin
        run: |
          if ./gradlew metalavaCheckCompatibility 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibility FAILED'; then
            echo "::set-output name=compat-errors::$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd ',')"
          fi

      - name: Check Android libs compatibility
        id: check-compat-android
        run: |
          if ./gradlew metalavaCheckCompatibilityDebug 2>&1 | tee gradle_output.log | grep -q 'metalavaCheckCompatibilityDebug FAILED'; then
            echo "::set-output name=compat-errors::$(grep -oP '(?<=error: ).*' gradle_output.log | paste -sd ',')"
          fi

      - name: Combine possible compatibility errors
        id: combine-compat-errors
        run: |
          combined_errors=""
          
          # Append Kotlin libs compat errors
          if [[ "${{ steps.check-compat-kotlin.outputs.compat-errors }}" != "" ]]; then
            combined_errors+="${{ steps.check-compat-kotlin.outputs.compat-errors }}"
          fi
          
          # Append Android libs compat errors
          if [[ "${{ steps.check-compat-android.outputs.compat-errors }}" != "" ]]; then
            if [[ combined_errors != "" ]]; then
              combined_errors+=","
            fi
            combined_errors+="${{ steps.check-compat-android.outputs.compat-errors }}"
          fi
          
          echo "::set-output name=combined-compat-errors::${combined_errors}"

      - name: Update PR with errors
        if: ${{ steps.combine-compat-errors.outputs.combined-compat-errors != '' }}
        run: |
          IFS=',' read -ra errors_arr <<< "${{ steps.combine-compat-errors.outputs.combined-compat-errors }}"
          
          # Group errors by module
          declare -A module_errors
          for error in "${errors_arr[@]}"; do
            module=$(echo "${error}" | sed -E 's/.* ([^ ]+)\..*/\1/')
            if [[ ! "${module_errors[$module]}" ]]; then
              module_errors[$module]="${error}"
            else
              module_errors[$module]+=$'\n'"${error}"
            fi
          done
          
          # Print errors grouped by module
          comment_message=""
          for module in "${!module_errors[@]}"; do
            comment_message+="${module}:"$'\n'
            comment_message+="${module_errors[$module]}"
          done
          
          echo "$comment_message"
