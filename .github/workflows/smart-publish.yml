name: Smart publishing

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true

jobs:
  publish-smart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Append getModulesList Task to root build.gradle.kts
        run: |
          if [ -f "build.gradle.kts" ]; then
            echo 'tasks.register<Task>("getModulesList") {' >> build.gradle.kts
            echo '    doLast {' >> build.gradle.kts
            echo '        project.subprojects' >> build.gradle.kts
            echo '            .filter { subproject ->' >> build.gradle.kts
            echo '                !subproject.name.contains("app") && subproject.childProjects.isEmpty()' >> build.gradle.kts
            echo '            }' >> build.gradle.kts
            echo '            .joinToString(separator = " ", transform = Project::getPath)' >> build.gradle.kts
            echo '            .also(::println)' >> build.gradle.kts
            echo '    }' >> build.gradle.kts
            echo '}' >> build.gradle.kts
          elif [ -f "build.gradle" ]; then
            echo 'tasks.register("getModulesList") {' >> build.gradle
            echo '    doLast {' >> build.gradle
            echo '        println project.subprojects.findAll { subproject ->' >> build.gradle
            echo '            !subproject.name.contains("app") && subproject.childProjects.isEmpty()' >> build.gradle
            echo '        }.collect { it.path }.join(" ")' >> build.gradle
            echo '    }' >> build.gradle
            echo '}' >> build.gradle
          else
            echo "‚ùå No root build.gradle or build.gradle.kts found!"
            exit 1
          fi

      - name: Publish smart
        id: publish-smart
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          VERSION: ${{ github.event.inputs.version }}
        run: |
          # Gather array of modules to publish
          echo "Gathering array of modules to publish..."
          MODULES=$(./gradlew getModulesList --quiet | tail -n 1)
          echo "$MODULES"
          
          for module in $MODULES; do
            echo "üöÄ Publishing module: $module"
          
            # Run the Gradle publish task with minimal output and capture the logs
            #LOG=$(./gradlew "$module:publish" --quiet --console=plain --stacktrace 2>&1 || true)
            LOG=$(./gradlew "$module:publish" 2>&1 || true)
            echo "$LOG"
          
            if echo "$LOG" | grep -q "BUILD SUCCESSFUL"; then
              echo "‚úÖ Successfully published $module module"
              continue
            fi
          
            echo "‚ö†Ô∏è Publishing failed for $module module. Checking if it's a 409 Conflict..."
          
            if echo "$LOG" | grep -q "409 Conflict"; then
              echo "üî¥ 409 Conflict detected! Deleting old package version..."
          
              PACKAGE_NAME="your-package-name"  # Adjust this as needed
              ORG_NAME="your-org" # Your GitHub org
          
              # Fetch latest version ID of the package
              VERSION_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/orgs/$ORG_NAME/packages/container/$PACKAGE_NAME/versions" | jq -r '.[0].id')
              
              if [ -z "$VERSION_ID" ] || [ "$VERSION_ID" == "null" ]; then
                echo "‚ùå Failed to get package version ID. Skipping delete."
                exit 1
              fi
          
              echo "üóëÔ∏è Deleting package version: $VERSION_ID"
              curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github+json" \
                "https://api.github.com/orgs/$ORG_NAME/packages/container/$PACKAGE_NAME/versions/$VERSION_ID"
          
              echo "üîÑ Retrying publish for $module..."
              # Retry the publish task after deletion
              if ./gradlew "$module:publish" --quiet --console=plain --stacktrace; then
                echo "‚úÖ Successfully published $module after retry"
              else
                echo "‚ùå Publishing failed again after deletion. Stopping workflow."
                exit 1
              fi
            else
              echo "‚ùå Publishing failed with an error other than 409. Stopping workflow."
              exit 1
            fi
          done

      - name: Create GH release
        if: ${{ steps.publish-smart.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ github.event.inputs.version }} \
          --target ${{ github.ref_name }} \
          --generate-notes
