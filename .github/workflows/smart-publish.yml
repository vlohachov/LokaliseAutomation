name: Smart publishing

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        type: string
        required: true
      admin-github-token:
        description: 'Admin GitHub token'
        type: string
        required: true
      debug-logs:
        description: 'Debug logs'
        type: boolean
        required: false
        default: false

jobs:
  publish-smart:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Append getModulesList Task to root build.gradle.kts
        run: |
          if [ -f "build.gradle.kts" ]; then
            echo 'tasks.register<Task>("getModulesList") {' >> build.gradle.kts
            echo '    doLast {' >> build.gradle.kts
            echo '        project.subprojects' >> build.gradle.kts
            echo '            .filter { subproject ->' >> build.gradle.kts
            echo '                !subproject.name.contains("app") && subproject.childProjects.isEmpty()' >> build.gradle.kts
            echo '            }' >> build.gradle.kts
            echo '            .joinToString(separator = " ", transform = Project::getPath)' >> build.gradle.kts
            echo '            .also(::println)' >> build.gradle.kts
            echo '    }' >> build.gradle.kts
            echo '}' >> build.gradle.kts
          elif [ -f "build.gradle" ]; then
            echo 'tasks.register("getModulesList") {' >> build.gradle
            echo '    doLast {' >> build.gradle
            echo '        println project.subprojects.findAll { subproject ->' >> build.gradle
            echo '            !subproject.name.contains("app") && subproject.childProjects.isEmpty()' >> build.gradle
            echo '        }.collect { it.path }.join(" ")' >> build.gradle
            echo '    }' >> build.gradle
            echo '}' >> build.gradle
          else
            echo "‚ùå No root build.gradle or build.gradle.kts found!"
            exit 1
          fi

      - name: Publish smart
        id: publish-smart
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_TOKEN: ${{ github.token }}
          GH_TOKEN: ${{ github.event.inputs.admin-github-token }} # Required for gh CLI
          VERSION: ${{ github.event.inputs.version }}
        run: |
          # Gather list of modules to publish
          echo "Gathering list of modules to publish..."
      
          MODULES=$(./gradlew getModulesList --quiet | tail -n 1)
          
          if [ -z "$MODULES" ]; then
            echo "‚ùå No modules found to publish. Exiting..."
            exit 1
          fi
          
          if [ ${{ github.event.inputs.debug-logs }} == 'true' ]; then
            echo "Modules to publish: $MODULES"
          fi
          
          for module in $MODULES; do
            echo "üöÄ Publishing module: $module..."
          
            # Run the Gradle publish task with minimal output and capture the logs
            LOG=$(./gradlew $module:publish 2>&1 || true)
          
            if [ ${{ github.event.inputs.debug-logs }} == 'true' ]; then
              echo "$LOG"
            fi
          
            if echo "$LOG" | grep -q "BUILD SUCCESSFUL"; then
              echo "‚úÖ Successfully published $module module!"
              continue
            fi
        
            echo "‚ö†Ô∏è Publishing failed for $module module. Checking if it's a 409 Conflict..."
            
            # Check if the error is due to a 409 Conflict
            if echo "$LOG" | grep -q "Received status code 409 from server: Conflict"; then
              echo "üî¥ 409 Conflict detected! Deleting old package version..."
          
              PACKAGE_NAME="com.example${module//:/\.}"
              ORG_NAME=${{ github.repository_owner }} 
          
              # Fetch latest version ID of the package
              echo "üîç Fetching latest version ID of the $PACKAGE_NAME package..."

              gh api \
                -H "Accept: application/vnd.github+json" \
                /users/$ORG_NAME/packages/maven/$PACKAGE_NAME/versions
          
              VERSION_ID=$(gh api \
                -H "Accept: application/vnd.github+json" \
                /users/$ORG_NAME/packages/maven/$PACKAGE_NAME/versions | jq -r '.[0].id')
      
              if [ -z "$VERSION_ID" ] || [ "$VERSION_ID" == "null" ]; then
                echo "‚ùå Failed to get package version ID. Not able to delete."
                exit 1
              fi
          
              # Delete the conflicting package version
              echo "üóëÔ∏è Deleting conflicting $PACKAGE_NAME package (v${{ github.event.inputs.version }})..."
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                /users/$ORG_NAME/packages/maven/$PACKAGE_NAME/versions/$VERSION_ID
          
              # Retry the publish task after deletion
              echo "üîÑ Retrying publish for $module..."
              if ./gradlew $module:publish --quiet; then
                echo "‚úÖ Successfully published $module after retry"
              else
                echo "‚ùå Publishing failed again after deletion. Stopping workflow."
                exit 1
              fi
            else
              echo "‚ùå Publishing failed with an error other than 409. Stopping workflow."
              exit 1
            fi
          done

      - name: Create GH release
        if: ${{ steps.publish-smart.outcome == 'success' }}
        env:
          GH_TOKEN: ${{ github.token }} # Required for gh CLI
        run: |
          gh release create v${{ github.event.inputs.version }} \
          --target ${{ github.ref_name }} \
          --generate-notes
