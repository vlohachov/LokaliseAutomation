name: Sync strings with Lokalise

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
#  schedule:
#    - cron: '0 0 * * 1,3' # at 00:00 every Mon and Wed
  push:
    branches:
      - 'main' # on 'push' into 'main'/'master' branch
    paths:
      - '**/*strings.xml' # if 'push' contains changes to '*strings.xml' files
  workflow_dispatch:

env:
  GITHUB_TOKEN: ${{ github.token }}
  GITHUB_USER: cricut-builduser
  LOKALISE_TOKEN: ${{ secrets.LOKALISE_TOKEN }}
  LOKALISE_PROJECT_ID: ${{ secrets.LOKALISE_PROJECT_ID }}
  SKIP_MODULES_PATTERN: +(app) # For pattern details visit https://www.linuxjournal.com/content/pattern-matching-bash
  PROJECT_NAME: 'lokalise-automation'
  ORIGIN: 'main'

jobs:
  pull-translations:
    if: ${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup Lokalise CLI
        uses: frenck/action-setup-lokalise@v1

      - name: Checkout master
        uses: actions/checkout@v3.5.2

      - name: Get modules with "res" folder
        id: get_modules
        run: |
          arr=(`find . -type d -name res`)
          echo "Modules that contain res folder: ${arr[*]}"
          echo modules=$(echo "${arr[*]}") >> $GITHUB_OUTPUT;

      - name: Checkout Lokalise
        run: |
          git fetch origin
          git checkout -b lokalise/sync_translations origin/lokalise/sync_translations || git checkout -b lokalise/sync_translations

      - name: Map languages
        id: map_languages
        run: |
          # Load list of languages supported by Lokalise
          languages_json=$(lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} language list)
          # Extract only 'lang_iso' values form 'languages' array
          languages_iso=$(jq -r '.languages[].lang_iso' <<< ${languages_json})
          # Create array of supported languages
          languages_iso=(${languages_iso//$'\n'/ })
          # Create language mapping array for next step
          language_mapping="["
          for i in "${!languages_iso[@]}"; do
          original_iso="${languages_iso[$i]}"
          custom_iso=$(
          if [[ ${original_iso} == zh* ]]; then
            echo "${original_iso/_/-r}"
          elif [[ ${original_iso} = *?[0-9] ]]; then
            echo "b+${original_iso/_/+}"
          else 
            echo "${original_iso%_*}"
          fi
          )
          language_mapping+="{\"original_language_iso\":\"${original_iso}\",\"custom_language_iso\":\"${custom_iso}\"},"
          done
          language_mapping="${language_mapping::-1}]"
          echo language_mapping="${language_mapping}" >> $GITHUB_OUTPUT

      - name: Remove locales that are not supported
        run: |
          mapping='${{ steps.map_languages.outputs.language_mapping }}'
          # Get paths to all "strings.xml" files
          arr=(`find . -type f -name *strings.xml`)
          for counter in ${!arr[*]}; do
            file_path=${arr[counter]}
            echo "Process ${file_path} file..."
            # Get module from path, by cutting "/src/..." part out of original path
            module_path=${file_path%%/src/*}
            # Skip if excluded
            if [[ ${module_path#./} == ${{ env.SKIP_MODULES_PATTERN }} ]]; then
              echo "Skipping \"${module_path}\" module..."
              continue
            fi
            # Get path to /values" (/values-Lang_ISO) folder
            folder_path=$(dirname ${file_path})
            # Get suffix of /values-Lang_ISO folder (result "-Lang_ISO")
            folder_suffix=${folder_path##*values}
            # Convert folder suffix to lang-iso known by Lokalise
            locale="${folder_suffix:-en}"
            locale="${locale#-}"
            # Find proper lang iso supported by Lokalise in mapping array
            lang_iso=$(jq -r -c --arg locale "$locale" '.[] | select(.custom_language_iso == $locale) | .original_language_iso' <<< ${mapping})
            # Skip unknown lang iso
            if [[ ${lang_iso} == "" ]]; then
              echo "Removing ${folder_path} folder..."
              # Remove values folder
              rm -rf ${folder_path}
            fi
          done

      - name: Pull strings from Lokalise
        continue-on-error: true
        run: |
          mapping='${{ steps.map_languages.outputs.language_mapping }}'
          # Get paths to all "res" folders
          arr=(${{ steps.get_modules.outputs.modules }})
          for counter in ${!arr[*]}; do
            res_path=${arr[counter]}
            # Get module from path, by cutting "/src/..." part out of original path
            module_path=${res_path%%/src/*}
            # Skip if excluded
            if [[ ${module_path#./} == ${{ env.SKIP_MODULES_PATTERN }} ]]; then
              echo "Skipping \"${module_path}\" module..."
              continue
            fi
            # Replace "." in module path with project name to generate tag that consists of
            # project name and module path 
            tag=${module_path/./${{ env.PROJECT_NAME }}}
            echo "Pulling translations tagged \"${tag}\" into \"${module_path}\" module..."
            # Call Lokalise CLI (v2) "file download" command to pull all available translations 
            # (tagged with the tag we generated before) and unzip them to a proper module.
            lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} \
            file download --export-empty-as skip --export-sort first_added --format xml \
            --include-tags $tag --unzip-to "${module_path}/src/main/res" \
            --directory-prefix "values-%LANG_ISO%" --language-mapping "${mapping}" \
            --original-filenames true --json-unescaped-slashes --placeholder-format printf || true
          done

      - name: Generate timestamp
        id: generate_timestamp
        run: |
          echo timestamp=$(date +'%Y-%m-%dT%H:%M:%S') >> $GITHUB_OUTPUT;

      - name: Push changes
        id: push_changes
        uses: devops-infra/action-commit-push@v0.9.2
        with:
          github_token: ${{ github.token }}
          commit_prefix: "chore(lokalise): "
          commit_message: "update translations (${{ steps.generate_timestamp.outputs.timestamp }})"

      - name: Create PR
        if: ${{ steps.push_changes.outputs.files_changed != '' }}
        uses: devops-infra/action-pull-request@v0.5.5
        with:
          github_token: ${{ github.token }}
          source_branch: lokalise/sync_translations
          target_branch: ${{ env.ORIGIN }}
          title: "chore(lokalise): update translations"
          body: "This PR contains translations update."
          label: lokalise,translations,PLEASE REVIEW

  push-translations:
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - name: Inputs
        run: |
          echo "Project name: ${{ env.PROJECT_NAME }}"
          echo "Origin: ${{ env.ORIGIN }}"

      - name: Setup Lokalise CLI
        uses: frenck/action-setup-lokalise@v1

      - name: Checkout Lokalise
        id: checkout_lokalise
        continue-on-error: true
        uses: actions/checkout@v3.5.2
        with:
          fetch-depth: 0
          ref: lokalise/sync_translations

      - name: Merge
        if: ${{ steps.checkout_lokalise.outcome == 'success' }}
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git merge --no-ff origin/${{ env.ORIGIN }}

      - name: Checkout
        if: ${{ steps.checkout_lokalise.outcome == 'failure' }}
        uses: actions/checkout@v3.5.2

      - name: Map languages
        id: map_languages
        run: |
          # Load list of languages supported by Lokalise
          languages_json=$(lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} language list)
          # Extract only 'lang_iso' values form 'languages' array
          languages_iso=$(jq -r '.languages[].lang_iso' <<< ${languages_json})
          # Create array of supported languages
          languages_iso=(${languages_iso//$'\n'/ })
          # Create language mapping array for next step
          language_mapping="["
          for i in "${!languages_iso[@]}"; do
          original_iso="${languages_iso[$i]}"
          custom_iso=$(
          if [[ ${original_iso} == zh* ]]; then
            echo "${original_iso/_/-r}"
          elif [[ ${original_iso} = *?[0-9] ]]; then
            echo "b+${original_iso/_/+}"
          else 
            echo "${original_iso%_*}"
          fi
          )
          language_mapping+="{\"original_language_iso\":\"${original_iso}\",\"custom_language_iso\":\"${custom_iso}\"},"
          done
          language_mapping="${language_mapping::-1}]"
          echo language_mapping="${language_mapping}" >> $GITHUB_OUTPUT

      - name: Push strings to Lokalise
        run: |
          mapping='${{ steps.map_languages.outputs.language_mapping }}'
          # Get paths to all "strings.xml" files
          arr=(`find . -type f -name *strings.xml`)
          for counter in ${!arr[*]}; do
            file_path=${arr[counter]}
            echo "Process ${file_path} file..."
            # Get module from path, by cutting "/src/..." part out of original path
            module_path=${file_path%%/src/*}
            # Skip if excluded
            if [[ ${module_path#./} == ${{ env.SKIP_MODULES_PATTERN }} ]]; then
              echo "Skipping \"${module_path}\" module..."
              continue
            fi
            # Get path to /values" (/values-Lang_ISO) folder
            folder_path=$(dirname ${file_path})
            # Get suffix of /values-Lang_ISO folder (result "-Lang_ISO")
            folder_suffix=${folder_path##*values}
            # Convert folder suffix to lang-iso known by Lokalise
            locale="${folder_suffix:-en}"
            locale="${locale#-}"
            # Find proper lang iso supported by Lokalise in mapping array
            lang_iso=$(jq -r -c --arg locale "$locale" '.[] | select(.custom_language_iso == $locale) | .original_language_iso' <<< ${mapping})
            # Skip unknown lang iso
            if [[ ${lang_iso} == "" ]]; then
              continue
            fi
            # Replace "." in module path with project name to generate tag that consists of
            # project name and module path
            tag=${module_path/./${{ env.PROJECT_NAME }}}
            echo "Pushing \"${lang_iso}\" strings from \"${module_path}\" module with \"${tag}\" tag..."
            # Call Lokalise CLI (v2) "file upload" command to upload 'strings.xml' file.
            # Each string key is tagged with the tag we generated, so later on (while pulling)
            # script understands where pulled translations should be unzipped to
            lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} \
            file upload --file $file_path --detect-icu-plurals --lang-iso ${lang_iso} \
            --tag-skipped-keys --tags $tag 
          done

      - name: Cleanup tags for unused keys
        run: |
          shopt -s globstar
          arr=(**/values/*strings.xml)
          for counter in ${!arr[*]}; do
            file_path="./${arr[counter]}"
            file_name=${file_path##*/}
            echo "Process ${file_path} file..."
            # Get module from path, by cutting "/src/..." part out of original path
            module_path=${file_path%%/src/*}
            # Skip if excluded
            if [[ ${module_path#./} == ${{ env.SKIP_MODULES_PATTERN }} ]]; then
              echo "Skipping \"${module_path}\" module..."
              continue
            fi
            # Replace "." in module path with project name to generate tag that consists of
            # project name and module path
            tag=${module_path/./${{ github.event.inputs.project-name }}}
            echo "Cleanup strings from \"${module_path}\" module with \"${tag}\" tag..."
            echo "Loading remote keys tagged with \"${tag}\""
            response_json=$(lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} \
            key list --filter-platforms android --filter-tags ${tag} --filter-filenames ${file_name})
            # Extract only 'key_name.android' values from 'keys' array
            remote_keys=$(jq -r '.keys[].key_name.android' <<< ${response_json})
            # Create array of remote keys
            remote_keys=(${remote_keys//$'\n'/ })
            echo "Remote keys: ${remote_keys[*]}"
            echo "Parsing ${file_path} to get list of local keys..."
            # Parse '*strings.xml' to get list of all name attributes as json
            local_keys_json=$(yq -p=xml --xml-attribute-prefix=attr_ -o=json '.resources' ${file_path})
            # Extract only 'attr_name' values from 'string' array
            local_string_keys=$(jq -r '.string[].attr_name' <<< ${local_keys_json} || jq -r '.string.attr_name' <<< ${local_keys_json} )
            local_plurals_keys=$(jq -r '.plurals[].attr_name' <<< ${local_keys_json} || jq -r '.plurals.attr_name' <<< ${local_keys_json} )
            # Create array of local keys
            local_keys=( ${local_string_keys//$'\n'/ } ${local_plurals_keys//$'\n'/ } )
            echo "Local keys: ${local_keys[*]}"
            # Declare int to count removed/untagged keys
            keys_removed=0
            for counter in ${!remote_keys[*]}; do
              remote_key=${remote_keys[counter]}
              if ! [[ " ${local_keys[*]} " =~ " ${remote_key} " ]]; then
                echo "Removing \"${tag}\" tag for \"${remote_key}\" key..."
                # Get remote key id
                remote_key_id=$(jq -r -c --arg key_name "${remote_key}" '.keys[] | select(.key_name.android == $key_name) | .key_id' <<< ${response_json})
                # Get tags of the key
                tags_json=$(jq -r -c --arg key_name "${remote_key}" '.keys[] | select(.key_name.android == $key_name) | .tags' <<< ${response_json})
                echo "Tags json:"
                echo "$tags_json"
                # Remove tag
                edited_tags=$(jq -r -c --arg tag "${tag}" 'map(select(. != $tag))' <<< ${tags_json} | tr -d '[]"')
                echo "Edited tags:"
                echo "$edited_tags"
                # Update remote key tags
                lokalise2 --token ${{ env.LOKALISE_TOKEN }} --project-id ${{ env.LOKALISE_PROJECT_ID }} \
                key update --key-id ${remote_key_id} --tags "${edited_tags}" &> /dev/null
                # Increment counter
                keys_removed=$((keys_removed+1))
              fi
            done
            echo "${keys_removed} were removed (untagged)."
          done
