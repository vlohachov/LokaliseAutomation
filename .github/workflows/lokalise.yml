name: Sync strings with Lokalise

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  #schedule:
    #- cron: '*/15 * * * *'
  workflow_dispatch:

jobs:
  Sync-string-resources:
    runs-on: ubuntu-latest
    steps:
    - name: Setup Lokalise CLI
      uses: sudosubin/setup-lokalise-action@v1.0.1
      with:
        lokalise-version: 'latest' # or specify version (ex. '2.6.3')

    - name: Checkout
      uses: actions/checkout@v3.1.0
      
    - name: Read project name
      id: read_project_name
      run: |
        raw_project_name=$(./gradlew -q printProjectName)
        processed_project_name=$(echo $raw_project_name | tr " " "-" | tr '[:upper:]' '[:lower:]')
        echo project_name=$processed_project_name >> $GITHUB_OUTPUT

    - name: Pull strings from Lokalise
      continue-on-error: true
      run: |
        arr=(*/src/main/res)
        for counter in ${!arr[*]}; do
          file_path=${arr[counter]}
          module=${file_path%%/src/*}
          tag="${{ steps.read_project_name.outputs.project_name }}/${module}"
          echo "Pulling string for '${module}' module..."
          echo "Matching tag: ${tag}"
          #lokalise2 --token ${{ secrets.LOKALISE_TOKEN }} --project-id ${{ secrets.LOKALISE_PROJECT_ID }} file download --export-empty-as skip --export-sort first_added --format xml --include-tags $tag --unzip-to "${module}/src/main/res" --directory-prefix "values-%LANG_ISO%" --original-filenames false
        done
        
    - name: Push strings to Lokalise
      run: |
        arr=(*/src/main/res/values*/strings.xml)
        for counter in ${!arr[*]}; do
          file_path=${arr[counter]}
          module=${file_path%%/src/*}
          folder_path=$(dirname ${file_path})
          folder_suffix=${folder_path##*values}
          lang_iso=${folder_suffix#-}
          tag="${{ steps.read_project_name.outputs.project_name }}/${module}"
          echo "Pushing strings from '${module}' module..."
          echo "With tag: ${tag}"
          #lokalise2 --token ${{ secrets.LOKALISE_TOKEN }} --project-id ${{ secrets.LOKALISE_PROJECT_ID }} file upload --file $file_path --lang-iso ${lang_iso:-en} --tag-skipped-keys --tags $tag
        done

    - name: Check changes
      id: check_changes
      run: |
        if [[ `git status --porcelain` ]]; then
          echo changes_detected=true >> $GITHUB_OUTPUT;
        else 
          echo changes_detected=false >> $GITHUB_OUTPUT;
        fi

    - name: Check branch exists
      id: check_branch_exists
      continue-on-error: true
      run: |
        git ls-remote --exit-code --heads origin 'lokalise/sync_translations' >/dev/null 2>&1
        RESULT=$?
        if [[ $RESULT == '0' ]]; then
          echo "Branch does exist"
          echo branch_exists=true >> $GITHUB_OUTPUT;
        elif [[ $RESULT == '2' ]]; then
          echo "Branch does not exist"
          echo branch_exists=false >> $GITHUB_OUTPUT;
        fi

    - name: Checkout Lokalise branch
      if: ${{ steps.check_branch_exists.outputs.branch_exists == 'true' }}
      uses: actions/checkout@v3.1.0
      with:
        ref: lokalise/sync_translations

    - name: Push changes
      id: push_changes
      if: ${{ steps.check_changes.outputs.changes_detected == 'true' }}
      uses: devops-infra/action-commit-push@v0.9.2
      with:
        github_token: "${{ secrets.GITHUB_TOKEN }}"
        commit_prefix: "Update "
        commit_message: "Lokalise translations"
        force: false
        target_branch: lokalise/sync_translations

    - name: Create PR
      if: ${{ steps.push_changes.outputs.files_changed != '' }}
      uses: devops-infra/action-pull-request@v0.5.3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        source_branch: lokalise/sync_translations
        target_branch: main
        title: "Lokalise: Translations update"
        #reviewer: octocat
        #assignee: octocat
        label: lokalise
        #draft: true
        get_diff: true
