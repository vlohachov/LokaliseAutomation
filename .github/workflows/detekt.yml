name: Detekt check

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  baselines:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0
        with:
          ref: ${{ github.base_ref }}

      - name: Geberate baseline files
        run: |
          ./gradlew detektBaseline

      - name: Save baseline files
        uses: actions/upload-artifact@v3
        with:
          name: baseline-files
          path: ./**/detekt-baseline.xml

  detekt:
    needs: [ 'baselines' ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3.5.0

      - name: Load baseline files
        uses: actions/download-artifact@v3
        with:
          name: baseline-files

      - name: Detekt
        continue-on-error: true
        run: |
          ./gradlew detekt

      - name: Save report files
        uses: actions/upload-artifact@v3
        with:
          name: detekt-reports
          path: |
            ./**/build/reports/detekt/detekt.txt
            ./**/build/reports/detekt/detekt.xml

  notify:
    needs: [ 'detekt' ]
    runs-on: ubuntu-latest
    steps:
      - name: Load report files
        uses: actions/download-artifact@v3
        with:
          name: detekt-reports

      - name: Generate message
        run: |
          message=""
          
          # Gather array of reports
          reports=(`find . -name detekt.xml`)
          echo "${reports[@]}"
          
          for index in ${!reports[*]}; do
            report=${reports[index]}
            echo "Report: ${report}"
            # Parse report as json
            json=$(yq -p=xml --xml-attribute-prefix='' -o=json '.checkstyle.file' ${report})
            echo "${json}"
          
            # Skip if null
            if [[ "${json}" == "null" ]]; then
              continue
            fi
          
            # Add affected module
            message+="### ${report%%/build/*}"
            
            # Gather list of all files
            files=($(jq -r '.[].name' <<< ${json} || jq -r '.name' <<< ${json}))
          
            for index in ${!files[*]}; do
              file=${files[index]}
              echo "File: ${file}"
              
              message+=$'\n'"$(basename ${file}):"
              
              file_errors_json=$(jq -r --arg name "${file}" '.[] | select(.name == $name) | .error' <<< ${json} || jq -r '.error' <<< ${json})
              
              echo "${file_errors_json}"
              
              #for index in ${!errors[*]}; do
              # error=${errors[index]}
              #done
          
            done
            
          done
          
          echo "${message}"
