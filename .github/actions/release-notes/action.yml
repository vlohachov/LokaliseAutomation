name: Release notes
description: 'Generate release notes for all the libraries inside given catalog.'

inputs:
  catalog:
    description: 'Versions Catalog .toml file name'
    required: true

runs:
  using: composite
  steps:
    - name: Validate input
      shell: bash
      run: |
        if [ -z ${{ inputs.catalog }} ]; then
          echo "Missing 'catalog' input or it is empty."
          exit 1
        elif [ ! -f ${{ inputs.catalog }} ]; then
          echo "${{ inputs.catalog }} catalog file not found."
          exit 1
        fi

    - name: Parse Catalog
      shell: bash
      run: |
        # Parse into json
        #json=$(yq -oj '.' ${{ inputs.catalog }})
        # Update .versions and .libraries, so they are arrays instead of objects
        #json=$(echo "$json" | jq '{versions: [.versions | to_entries | .[] | {key: .key, value: .value}], libraries: [.libraries | to_entries | .[] | {key: .key, value: .value}]}' )
        # Update .libraries[], so each object contains actual version matching values from .versions[]
        #json=$(echo "$json" | jq '(.versions | map({(.key): .value}) | add) as $versions | .libraries |= map(.value.version |= $versions[.ref])')
        #echo "$json"
        
        toml=$(cat ${{ inputs.catalog }} | awk -F '=' '!NF { next } /^#/ && NF<3 { print; next } !/^#/ { gsub(/ /,"",$1); gsub(/ /,"",$2); split($2,array,"#"); print array[2]" = \""array[1]"\" #"$1; }')
        echo "Modified toml:"
        echo "$toml"
        json=$(echo "$toml" | yq -oj '.versions')
        echo "Origin json:"
        echo "$json"
        # Update .versions so they are array instead of object
        json=$(echo "$json" | jq 'to_entries | map({key: .key, value: .value})' )
        echo "Modified json:"
        echo "$json"
