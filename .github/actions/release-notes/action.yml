name: Release notes
description: 'Generate release notes for all the libraries inside given catalog.'

inputs:
  catalog:
    description: 'Versions Catalog .toml file name'
    required: true

runs:
  using: composite
  steps:
    - name: Validate input
      shell: bash
      run: |
        if [ -z ${{ inputs.catalog }} ]; then
          echo "Missing 'catalog' input or it is empty."
          exit 1
        elif [ ! -f ${{ inputs.catalog }} ]; then
          echo "${{ inputs.catalog }} catalog file not found."
          exit 1
        fi

    - name: Parse libraries releases
      id: parse
      shell: bash
      run: |
        # Modify source catalog and write output into tmp toml file
        modified_toml=$(cat ${{ inputs.catalog }} | perl -pe 's/(^\s*)([\w-]+)(\s*=\s*\"[\d\.]+\"\s*#)([\w-]+)(\s*$)/\1\4\3\2\5/g')
        echo "$modified_toml" >> modified.toml
        # Parse .versions as json object
        json=$(yq -oj '.versions' modified.toml)
        # Update .versions so they are array instead of object
        json=$(echo "$json" | jq 'to_entries | map({key: .key, value: .value})' )
        echo "${json}"
        echo json="${json}" >> $GITHUB_OUTPUT

    - name: Release notes
      id: release-notes
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        json='${{ steps.parse.outputs.json }}'
        echo "${json}"
        
        # Using jq to parse JSON and read into an associative array
        declare -A libraries
        while IFS="=" read -r library version; do
          libraries["${library}"]="${version}"
        done < <(echo "$json" | jq -r '.[] | "\(.key)=\(.value)"')
        
        # Now, print all keys and their corresponding values
        for library in "${!libraries[@]}"; do 
          echo "Loading \"${library}\" v${libraries[${library}]} release notes..."
        
        done
